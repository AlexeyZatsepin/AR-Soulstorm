From a8d76e0486e2f2e2ccef42b8f8239138550faf0d Mon Sep 17 00:00:00 2001
From: a-zatsepin <a.zatsepin@samsung.com>
Date: Wed, 3 Oct 2018 18:03:13 +0300
Subject: [PATCH] patch

---
 .../org/rooms/ar/soulstorm/ARActivity.java    |  88 ++++++++++++++++--
 .../ar/soulstorm/RenderablesAdapter.java      |  21 +++--
 .../rooms/ar/soulstorm/SignInActivity.java    |   1 +
 .../ar/soulstorm/model/DatabaseManager.java   |  40 +++++---
 .../rooms/ar/soulstorm/model/Resources.java   |  14 ++-
 .../rooms/ar/soulstorm/model/SignInState.java |   2 +
 app/src/main/res/drawable/ic_close.xml        |   7 ++
 app/src/main/res/drawable/texture_grass.jpg   | Bin 0 -> 13814 bytes
 .../main/res/layout/component_card_layout.xml |  15 +++
 .../res/layout/component_popup_window.xml     |  79 ++++++++++++++++
 10 files changed, 236 insertions(+), 31 deletions(-)
 create mode 100644 app/src/main/res/drawable/ic_close.xml
 create mode 100644 app/src/main/res/drawable/texture_grass.jpg
 create mode 100644 app/src/main/res/layout/component_popup_window.xml

diff --git a/app/src/main/java/org/rooms/ar/soulstorm/ARActivity.java b/app/src/main/java/org/rooms/ar/soulstorm/ARActivity.java
index 6fbddf5..5705456 100755
--- a/app/src/main/java/org/rooms/ar/soulstorm/ARActivity.java
+++ b/app/src/main/java/org/rooms/ar/soulstorm/ARActivity.java
@@ -1,12 +1,18 @@
 package org.rooms.ar.soulstorm;

+import android.arch.lifecycle.MutableLiveData;
 import android.os.Bundle;
+import android.os.StrictMode;
 import android.support.design.widget.BottomSheetBehavior;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.RecyclerView;
+import android.view.Gravity;
+import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
+import android.widget.ImageView;
 import android.widget.LinearLayout;
+import android.widget.PopupWindow;
 import android.widget.TextView;
 import android.widget.Toast;

@@ -20,12 +26,18 @@ import com.google.ar.sceneform.FrameTime;
 import com.google.ar.sceneform.Node;
 import com.google.ar.sceneform.Scene;
 import com.google.ar.sceneform.math.Vector3;
-import com.google.ar.sceneform.rendering.ModelRenderable;
+import com.google.ar.sceneform.rendering.PlaneRenderer;
+import com.google.ar.sceneform.rendering.Texture;
 import com.google.ar.sceneform.rendering.ViewRenderable;
 import com.google.ar.sceneform.ux.ArFragment;

+import org.rooms.ar.soulstorm.model.Building;
+import org.rooms.ar.soulstorm.model.DatabaseManager;
+import org.rooms.ar.soulstorm.model.Resources;
 import org.rooms.ar.soulstorm.model.SignInState;

+import java.util.concurrent.CompletableFuture;
+
 public class ARActivity extends AppCompatActivity implements RenderablesAdapter.OnRenderableSelectListener {
     private static final String TAG = ARActivity.class.getSimpleName();

@@ -53,13 +65,48 @@ public class ARActivity extends AppCompatActivity implements RenderablesAdapter.
                 arFragment.getArSceneView().getScene().removeOnUpdateListener(this);
             }
         });
+        Texture.Sampler sampler =
+                Texture.Sampler.builder()
+                        .setMagFilter(Texture.Sampler.MagFilter.LINEAR)
+                        .setMinFilter(Texture.Sampler.MinFilter.LINEAR)
+                        .setWrapMode(Texture.Sampler.WrapMode.REPEAT)
+                        .build();
+
+        CompletableFuture<Texture> trigrid = Texture.builder()
+                .setSource(this, R.drawable.texture_grass)
+                .setSampler(sampler).build();
+
+        PlaneRenderer planeRenderer = arFragment.getArSceneView().getPlaneRenderer();
+        planeRenderer.getMaterial().thenAcceptBoth(trigrid, (material, texture) -> {
+            material.setTexture(PlaneRenderer.MATERIAL_TEXTURE, texture);
+            material.setFloat2(PlaneRenderer.MATERIAL_UV_SCALE, 100.0f, 100.0f);
+        });
+
+        arFragment.setOnTapArPlaneListener(
+                (HitResult hitResult, Plane plane, MotionEvent motionEvent) -> {
+                    //TODO tutorial
+                });
+
+        if (BuildConfig.DEBUG) {
+            StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()
+                    .detectAll()
+                    .penaltyLog()
+                    .build());
+            StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()
+                    .detectAll()
+                    .penaltyLog()
+                    .build());
+        }
     }

     @Override
     protected void onResume() {
         super.onResume();
-        SignInState.getInstance().getResourses().observe(this,
-                resourses -> energyLevelTextView.setText(String.valueOf(resourses.getEnergy())));
+        MutableLiveData<Resources> liveData = SignInState.getInstance().getResourses();
+        liveData.observe(this, resources -> {
+            DatabaseManager.getInstance().saveResources(resources);
+            energyLevelTextView.setText(String.valueOf(resources.getEnergy()));
+        });
     }

     private void initMenu() {
@@ -75,8 +122,8 @@ public class ARActivity extends AppCompatActivity implements RenderablesAdapter.
                 .thenAccept(
                         (renderable) -> {
                             LinearLayout ll = (LinearLayout) renderable.getView();
-                            ll.findViewById(R.id.start).setOnClickListener(v->Toast.makeText(getApplicationContext(), "Start", Toast.LENGTH_LONG).show());
-                            ll.findViewById(R.id.exit).setOnClickListener(v->finish());
+                            ll.findViewById(R.id.start).setOnClickListener(v -> Toast.makeText(getApplicationContext(), "Start", Toast.LENGTH_LONG).show());
+                            ll.findViewById(R.id.exit).setOnClickListener(v -> finish());
                             node.setRenderable(renderable);
                         })
                 .exceptionally(
@@ -86,10 +133,10 @@ public class ARActivity extends AppCompatActivity implements RenderablesAdapter.
     }

     @Override
-    public void onSelect(ModelRenderable renderable) {
+    public void onSelect(Building item) {
         arFragment.setOnTapArPlaneListener(
                 (HitResult hitResult, Plane plane, MotionEvent motionEvent) -> {
-                    if (renderable == null) {
+                    if (item.getRendarable() == null) {
                         return;
                     }
                     // Create the Anchor.
@@ -101,9 +148,12 @@ public class ARActivity extends AppCompatActivity implements RenderablesAdapter.
                     Node node = new Node();
                     node.setParent(anchorNode);
                     node.setLocalScale(new Vector3(0.3f, 0.3f, 0.3f));
-                    node.setRenderable(renderable);
+                    node.setRenderable(item.getRendarable());
 //                    node.select();

+                    Resources res = SignInState.getInstance().getResourses().getValue();
+                    if (res != null) res.addBuilding(item);
+
                     Node infoCard = new Node();
                     infoCard.setParent(node);
                     infoCard.setEnabled(false);
@@ -129,5 +179,25 @@ public class ARActivity extends AppCompatActivity implements RenderablesAdapter.
         bottomSheetBehavior.setState(BottomSheetBehavior.STATE_COLLAPSED);
     }

-
+    public static void openPopup(View view, Building item) {
+        LayoutInflater inflater = (LayoutInflater)
+                view.getContext().getSystemService(LAYOUT_INFLATER_SERVICE);
+        View popupView = inflater.inflate(R.layout.component_popup_window, null);
+
+        int width = (int) (300 * view.getContext().getResources().getDisplayMetrics().density);
+        int height = LinearLayout.LayoutParams.WRAP_CONTENT;
+        final PopupWindow popupWindow = new PopupWindow(popupView, width, height, true);
+
+        popupWindow.showAtLocation(view, Gravity.CENTER, 0, 0);
+
+        ImageView imageView = popupView.findViewById(R.id.media_image);
+        imageView.setImageDrawable(view.getContext().getDrawable(item.getImage()));
+        TextView titleView = popupView.findViewById(R.id.primary_text);
+        titleView.setText(item.getTitle());
+        TextView descriptionView = popupView.findViewById(R.id.sub_text);
+        descriptionView.setText(item.getDescription());
+        popupView.findViewById(R.id.close).setOnClickListener(v->popupWindow.dismiss());
+    }
+
+
 }
diff --git a/app/src/main/java/org/rooms/ar/soulstorm/RenderablesAdapter.java b/app/src/main/java/org/rooms/ar/soulstorm/RenderablesAdapter.java
index c992ecb..315dd08 100644
--- a/app/src/main/java/org/rooms/ar/soulstorm/RenderablesAdapter.java
+++ b/app/src/main/java/org/rooms/ar/soulstorm/RenderablesAdapter.java
@@ -10,8 +10,6 @@ import android.view.ViewGroup;
 import android.widget.ImageView;
 import android.widget.TextView;

-import com.google.ar.sceneform.rendering.ModelRenderable;
-
 import org.rooms.ar.soulstorm.model.Building;
 import org.rooms.ar.soulstorm.model.Resources;
 import org.rooms.ar.soulstorm.model.SignInState;
@@ -26,7 +24,7 @@ public class RenderablesAdapter extends RecyclerView.Adapter<RenderablesAdapter.
     private LifecycleOwner lifecycleObserver;

     public interface OnRenderableSelectListener {
-        void onSelect(ModelRenderable renderable);
+        void onSelect(Building renderable);
     }

     public RenderablesAdapter(ARActivity activity) {
@@ -52,13 +50,20 @@ public class RenderablesAdapter extends RecyclerView.Adapter<RenderablesAdapter.
         holder.imageView.setImageDrawable(holder.itemView.getContext().getDrawable(info.getImage()));
         holder.titleView.setText(info.getTitle());
         holder.descriptionView.setText(info.getDescription());
+        holder.coast.setText(String.valueOf(info.getCoast()));
         holder.pin.setOnClickListener(v -> {
-            listener.onSelect(info.getRendarable());
+            listener.onSelect(info);
             Resources resources = resoursesLiveData.getValue();
-            resoursesLiveData.postValue(new Resources(resources.getEnergy()-info.getCoast(), resources.getForce()));
+            Resources temp = new Resources(resources.getEnergy()-info.getCoast(), resources.getForce());
+            resoursesLiveData.postValue(temp);
+        });
+        resoursesLiveData.observe(lifecycleObserver, resources -> {
+            boolean condition = resources.getEnergy()>=info.getCoast();
+            holder.pin.setEnabled(condition);
+            android.content.res.Resources res = holder.itemView.getResources();
+            holder.coast.setTextColor(condition? res.getColor(android.R.color.white) : res.getColor(android.R.color.holo_red_dark));
         });
-        resoursesLiveData.observe(lifecycleObserver, resources ->
-                holder.pin.setEnabled(info.getEnergyBoost()>=info.getCoast()));
+        holder.about.setOnClickListener(v-> ARActivity.openPopup(holder.itemView, info));
     }

     @Override
@@ -72,6 +77,7 @@ public class RenderablesAdapter extends RecyclerView.Adapter<RenderablesAdapter.
         TextView descriptionView;
         TextView pin;
         TextView about;
+        TextView coast;

         ModelViewHolder(View itemView) {
             super(itemView);
@@ -80,6 +86,7 @@ public class RenderablesAdapter extends RecyclerView.Adapter<RenderablesAdapter.
             descriptionView = itemView.findViewById(R.id.sub_text);
             about = itemView.findViewById(R.id.action_button_2);
             pin = itemView.findViewById(R.id.action_button_1);
+            coast = itemView.findViewById(R.id.energy_cost);
         }
     }
 }
diff --git a/app/src/main/java/org/rooms/ar/soulstorm/SignInActivity.java b/app/src/main/java/org/rooms/ar/soulstorm/SignInActivity.java
index eef242e..5beb6bc 100644
--- a/app/src/main/java/org/rooms/ar/soulstorm/SignInActivity.java
+++ b/app/src/main/java/org/rooms/ar/soulstorm/SignInActivity.java
@@ -235,6 +235,7 @@ public class SignInActivity extends AppCompatActivity implements TextureView.Sur
         if (currentUser != null) {
             SignInState.getInstance().setUser(currentUser);
             startActivity(new Intent(this, ARActivity.class));
+            finish();
         }
     }

diff --git a/app/src/main/java/org/rooms/ar/soulstorm/model/DatabaseManager.java b/app/src/main/java/org/rooms/ar/soulstorm/model/DatabaseManager.java
index 2eb771e..7b802bd 100644
--- a/app/src/main/java/org/rooms/ar/soulstorm/model/DatabaseManager.java
+++ b/app/src/main/java/org/rooms/ar/soulstorm/model/DatabaseManager.java
@@ -1,6 +1,8 @@
 package org.rooms.ar.soulstorm.model;

+import android.support.annotation.NonNull;
 import android.util.Log;
+import android.widget.Toast;

 import com.google.firebase.database.DataSnapshot;
 import com.google.firebase.database.DatabaseError;
@@ -15,25 +17,28 @@ public class DatabaseManager {
     private static String TAG = DatabaseManager.class.getSimpleName();

     private DatabaseManager(){
-        mDatabase = FirebaseDatabase.getInstance().getReference();
-
         FirebaseDatabase.getInstance().setPersistenceEnabled(true);
+        mDatabase = FirebaseDatabase.getInstance().getReference();
+        mDatabase.keepSynced(true);

         DatabaseReference userLastOnlineRef = mDatabase.child("users").child("last_online");
         userLastOnlineRef.onDisconnect().setValue(ServerValue.TIMESTAMP);

-        String id = SignInState.getInstance().getUser().getUid();
-        mDatabase.child("res").child(id).addValueEventListener(new ValueEventListener() {
+        DatabaseReference connectedRef = FirebaseDatabase.getInstance().getReference(".info/connected");
+        connectedRef.addValueEventListener(new ValueEventListener() {
             @Override
-            public void onDataChange(DataSnapshot dataSnapshot) {
-                for (DataSnapshot item: dataSnapshot.getChildren()) {
-                    // TODO: handle the post
+            public void onDataChange(@NonNull DataSnapshot snapshot) {
+                boolean connected = snapshot.getValue(Boolean.class);
+                if (connected) {
+                    System.out.println("connected");
+                } else {
+                    System.out.println("not connected");
                 }
             }

             @Override
-            public void onCancelled(DatabaseError databaseError) {
-                Log.w(TAG, "loadResource:onCancelled", databaseError.toException());
+            public void onCancelled(DatabaseError error) {
+                System.err.println("Listener was cancelled");
             }
         });
     }
@@ -41,7 +46,6 @@ public class DatabaseManager {
     public static DatabaseManager getInstance() {
         if (manager == null) {
             manager = new DatabaseManager();
-
         }
         return manager;
     }
@@ -50,8 +54,22 @@ public class DatabaseManager {
         String id = SignInState.getInstance().getUser().getUid();
         mDatabase.child("res").child(id).setValue(resources).addOnSuccessListener(aVoid -> {

-        }).addOnFailureListener(e -> {
+        }).addOnFailureListener(e -> Log.e(TAG, e.getMessage()));
+    }
+
+    public void requestResources() {
+        String id = SignInState.getInstance().getUser().getUid();
+        mDatabase.child("res").child(id).addListenerForSingleValueEvent(new ValueEventListener() {
+            @Override
+            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
+                Resources resources = dataSnapshot.getValue(Resources.class);
+                SignInState.getInstance().setResourses(resources);
+            }

+            @Override
+            public void onCancelled(@NonNull DatabaseError databaseError) {
+                Log.e(TAG, databaseError.getDetails());
+            }
         });
     }
 }
diff --git a/app/src/main/java/org/rooms/ar/soulstorm/model/Resources.java b/app/src/main/java/org/rooms/ar/soulstorm/model/Resources.java
index 09fa11f..66c0b75 100644
--- a/app/src/main/java/org/rooms/ar/soulstorm/model/Resources.java
+++ b/app/src/main/java/org/rooms/ar/soulstorm/model/Resources.java
@@ -6,14 +6,16 @@ import java.util.Map;
 public class Resources {
     private long energy;
     private long force;
-    private Map<Building, Integer> mMap;
+    private Map<String, Integer> items;

-    public Resources(){}
+    public Resources(){
+        energy = 100;
+    }

     public Resources(long energy, long force) {
         this.energy = energy;
         this.force = force;
-        mMap = new HashMap<>();
+        items = new HashMap<>();
     }

     public long getEnergy() {
@@ -32,7 +34,11 @@ public class Resources {
         this.force = force;
     }

+    public Map<String, Integer> getItems() {
+        return items;
+    }
+
     public void addBuilding(Building item) {
-        mMap.computeIfAbsent(item, building -> mMap.get(building)+1);
+        items.computeIfAbsent(item.name(), building -> items.getOrDefault(building,0)+1);
     }
 }
diff --git a/app/src/main/java/org/rooms/ar/soulstorm/model/SignInState.java b/app/src/main/java/org/rooms/ar/soulstorm/model/SignInState.java
index 2aa7b98..8629bff 100644
--- a/app/src/main/java/org/rooms/ar/soulstorm/model/SignInState.java
+++ b/app/src/main/java/org/rooms/ar/soulstorm/model/SignInState.java
@@ -24,6 +24,8 @@ public class SignInState {

     public void setUser(FirebaseUser user) {
         this.user = user;
+        resourses.setValue(new Resources());
+        DatabaseManager.getInstance().requestResources();
     }

     public MutableLiveData<Resources> getResourses() {
diff --git a/app/src/main/res/drawable/ic_close.xml b/app/src/main/res/drawable/ic_close.xml
new file mode 100644
index 0000000..78007cc
--- /dev/null
+++ b/app/src/main/res/drawable/ic_close.xml
@@ -0,0 +1,7 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:height="24dp"
+    android:width="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path android:fillColor="#000" android:pathData="M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z" />
+</vector>
\ No newline at end of file